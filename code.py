# -*- coding: utf-8 -*-
"""Tugas Akhir.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OBo0Sq24K8nl4YeVUtYqh8fXPKnrnaIi
"""

from google.colab import drive
drive.mount('/content/drive')

# Data Processing
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

# Modelling
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, ConfusionMatrixDisplay
from sklearn.model_selection import RandomizedSearchCV, train_test_split
from scipy.stats import randint

# Tree Visualisation
from sklearn.tree import export_graphviz
from IPython.display import Image
import graphviz

df = pd.read_csv('/content/drive/MyDrive/Semester 6/Daming/kidney_disease.csv')
df.head()

df.info()

#Ubah String menjadi numerik
df[['htn','dm','cad','pe','ane']] = df[['htn','dm','cad','pe','ane']].replace(to_replace={'yes':1,'no':0})
df[['rbc','pc']] = df[['rbc','pc']].replace(to_replace={'abnormal':1,'normal':0})
df[['pcc','ba']] = df[['pcc','ba']].replace(to_replace={'present':1,'notpresent':0})
df[['appet']] = df[['appet']].replace(to_replace={'good':1,'poor':0,'no':np.nan})
#df['classification'] = df['classification'].replace(to_replace={'ckd':1.0,'ckd\t':1.0,'notckd':0.0,'no':0.0})

#Menilik lebih jauh
df['cad'] = df['cad'].replace(to_replace='\tno',value=0)
df['dm'] = df['dm'].replace(to_replace={'\tno':0,'\tyes':1,' yes':1, '':np.nan})

df.head()

df.isna().sum()

df['pcv'] = df['pcv'].replace('\t?', np.nan)
df['wc'] = df['wc'].replace('\t?', np.nan)
df['rc'] = df['rc'].replace('\t?', np.nan)

df['pcv'] = df['pcv'].astype(float)
df['wc'] = df['wc'].astype(float)
df['rc'] = df['rc'].astype(float)
df.info()

df.isna().sum()

# Korelasi antar dataset
h_labels = [x.replace('_', ' ').title()

for x in list(df.select_dtypes(include=['number', 'bool']).columns.values)]

fig, ax = plt.subplots(figsize=(20,6))
_ = sns.heatmap(
df.corr(),
annot=True,
xticklabels=h_labels,
yticklabels=h_labels,
cmap=sns.cubehelix_palette(as_cmap=True), ax=ax)

summary = df.describe(include='all')
summary = summary.transpose()
summary

numeric_columns = df.select_dtypes(include=['number']).columns
df[numeric_columns] = df[numeric_columns].fillna(df.mean())

categorical_columns = df.select_dtypes(exclude=['number']).columns
df[categorical_columns] = df[categorical_columns].fillna(df.mode().iloc[0])

df1 = df[df.classification == "notckd"].sample(n = 150)
df2 = df[df.classification == "ckd"].sample(n = 150)

df_fix = pd.concat([df1, df2])

df_fix.describe(include='all').transpose()

df_fix.info()

x = df_fix.drop(['classification', 'rbc', 'pc', 'pcc', 'ba', 'htn', 'dm', 'cad', 'appet', 'pe', 'ane', 'id'], axis=1)
y = df_fix['classification']

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
rf_model = RandomForestClassifier(n_estimators=50, max_features="auto", random_state=42)
rf_model.fit(X_train, y_train)

pred = rf_model.predict(X_test)
pred

accuracy = accuracy_score(y_test, pred)
print("Accuracy: ", accuracy)

for i in range(3):
    tree = rf_model.estimators_[i]
    dot_data = export_graphviz(tree,
                               feature_names=X_train.columns,
                               filled=True,
                               max_depth=2,
                               impurity=False,
                               proportion=True)
    graph = graphviz.Source(dot_data)
    display(graph)